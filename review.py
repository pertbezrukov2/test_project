import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.utils import to_categorical
import numpy as np

# Обучающие данные
train_data = [
    "Я люблю кофе.",
    "Я люблю чай.",
    "Мне не нравится молоко.",
    "Я собираюсь в супермаркет позже этим утром за кофе.",
    "Суп отличный, очень вкусный!",
    "Пицца была пересолена.",
    "Салат свежий и хрустящий.",
    "Кофе слишком крепкий для меня.",
    "Десерт просто восхитителен.",
    "Мясо было недожарено.",
    "Обслуживание было медленным.",
    "Я рекомендую этот ресторан всем.",
    "Суп не очень понравился, слишком кислый.",
    "Чай был слишком крепким.",
    "Паста приготовлена идеально.",
    "Фрукты свежие и сладкие.",
    "Коктейль оказался слишком сладким.",
    "Стейк был очень вкусным и сочным.",
    "Доставка была быстрой и аккуратной.",
    "Сервис на высшем уровне!",
    "Десерт оказался слишком тяжелым.",
    "Салат был недостаточно заправлен.",
    "Бургеры очень вкусные!",
    "Кофе подали холодным.",
    "Молоко не было свежим.",
    "Пирог был слишком сухим.",
    "Рыба была пересолена.",
    "Обстановка в кафе уютная и приятная.",
    "Цены немного завышены для качества еды.",
    "Я не рекомендую этот ресторан.",
    "Лосось был приготовлен идеально.",
    "Чай из пакетиков не понравился.",
    "Суп с грибами оказался очень вкусным!",
    "Салат с курицей был очень сытным.",
    "Коктейли были поданы красиво, но вкус оставлял желать лучшего.",
    "Пицца с морепродуктами была просто отличной!",
    "Десерт был слишком сладким для моего вкуса.",
    "Кофе был крепким, но ароматным.",
    "Я не люблю острую еду, но здесь она была в меру острой.",
    "Обслуживание было дружелюбным и внимательным.",
    "Паста с соусом альфредо была великолепной!",
    "Суп с чечевицей оказался очень питательным.",
    "Я бы вернулся сюда снова ради десертов!",
    "Чай был подан слишком горячим, я обжегся.",
    "Фрукты были не совсем спелыми.",
    "Кофе подают в красивых чашках, это приятно!",
    "Цены приемлемые для такого уровня сервиса.",
    "Салат с тунцом оказался очень сытным и вкусным!",
    "Стейк был немного пережарен, но все равно вкусный.",
    "Обстановка в ресторане была слишком шумной для меня.",
    "Я не люблю молочные коктейли, но этот был хорош!",
    "Мороженое было слишком жестким, его трудно было есть.",
    "Чай с лимоном оказался слишком кислым для меня.",
    "Пирожные были свежими и очень вкусными!",
    "Ресторан имеет отличное расположение в центре города.",
    "Доставка еды была бесплатной, что приятно удивило!",
    "Кофе с шоколадом — это просто бомба!",
    "Суп из тыквы оказался слишком сладким для меня.",
    "Бургеры здесь всегда свежие и сочные!",
    "Я бы посоветовал попробовать десерты здесь — они великолепны!",
    "Рыба была недостаточно приправлена, но все равно съедобная.",
    "Обслуживание оставляет желать лучшего, ждали долго.",
    "Пицца была холодной при доставке, это разочаровало меня.",
    "Здесь отличный выбор вин к ужину!",
    "Чай с мятой оказался очень освежающим.",
    "Салат Цезарь был недостаточно заправлен.",
    "Кофе здесь всегда свежий и ароматный.",
    "Паста с морепродуктами была великолепна!",
    "Десерты здесь — настоящая находка!",
    "Обслуживание было быстрым и профессиональным.",
    "Цены на напитки немного завышены.",
    "Ресторан предлагает отличные бизнес-ланчи.",
    "Стейк был идеальной прожарки.",
    "Я не люблю острые блюда, но здесь они были в меру острыми.",
    "Фрукты были спелыми и сладкими.",
    "Коктейли были поданы красиво, но вкус оставлял желать лучшего.",
    "Молоко было свежим и вкусным.",
    "Бургеры здесь всегда свежие и сочные!",
    "Я бы посоветовал попробовать десерты здесь — они великолепны!",
    "Рыба была недостаточно приправлена, но все равно съедобная.",
    "Обслуживание оставляет желать лучшего, ждали долго.",
    "Пицца была холодной при доставке, это разочаровало меня.",
    "Здесь отличный выбор вин к ужину!",
    "Чай с мятой оказался очень освежающим.",
    "Салат Цезарь был недостаточно заправлен.",
    "Кофе здесь всегда свежий и ароматный.",
    "Паста с морепродуктами была великолепна!",
    "Десерты здесь — настоящая находка!",
    "Обслуживание было быстрым и профессиональным.",
    "Цены на напитки немного завышены.",
    "Ресторан предлагает отличные бизнес-ланчи.",
    "Стейк был идеальной прожарки.",
    "Я не люблю острые блюда, но здесь они были в меру острыми.",
    "Фрукты были спелыми и сладкими."
]

# Метки для классификации (0 или 1)
labels = [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1,
          0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1,
          0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0,
          1, 0, 1, 0]

# Создаем экземпляр Tokenizer
num_words = 10000  # Максимальное количество слов
oov_token = '<UNK>'  # Токен для слов, не входящих в словарь

tokenizer = Tokenizer(num_words=num_words, oov_token=oov_token)

# Обучаем Tokenizer на обучающих данных
tokenizer.fit_on_texts(train_data)

# Получаем индекс слов
word_index = tokenizer.word_index

# Кодируем обучающие данные в последовательности
train_sequences = tokenizer.texts_to_sequences(train_data)

# Паддинг последовательностей
maxlen = max(len(x) for x in train_sequences)  # Максимальная длина последовательности
train_sequences_padded = pad_sequences(train_sequences, padding='post', maxlen=maxlen)

# Преобразуем метки в формат one-hot
labels = np.array(labels)
labels = to_categorical(labels, num_classes=2)

# Строим модель
model = Sequential([
    Embedding(input_dim=num_words, output_dim=16, input_length=maxlen),

    LSTM(64),
    Dense(2, activation='softmax')

])

# Компиляция модели
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Обучение модели
model.fit(train_sequences_padded, labels, epochs=30, batch_size=32, validation_split=0.2)


# Функция для предсказания отзыва
def predict_review(review_text):
    # Преобразуем новый отзыв в последовательность
    sequence = tokenizer.texts_to_sequences([review_text])

    # Паддинг последовательности
    sequence_padded = pad_sequences(sequence, padding='post', maxlen=maxlen)

    # Получаем предсказание модели
    prediction = model.predict(sequence_padded)

    # Интерпретируем результат
    if np.argmax(prediction) == 0:
        return "Плохой отзыв"
    else:
        return "Хороший отзыв"


# Пример использования
review1 = input('       :')
print(predict_review(review1))
